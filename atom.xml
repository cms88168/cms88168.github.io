<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.cmsj.in</id>
    <title>蒼茫世界</title>
    <updated>2021-09-16T14:24:00.529Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.cmsj.in"/>
    <link rel="self" href="https://www.cmsj.in/atom.xml"/>
    <subtitle>蒼茫世界,誰主沉浮</subtitle>
    <logo>https://www.cmsj.in/images/avatar.png</logo>
    <icon>https://www.cmsj.in/favicon.ico</icon>
    <rights>All rights reserved 2021, 蒼茫世界</rights>
    <entry>
        <title type="html"><![CDATA[算法：常用的基础算法：穷举、迭代、递归和回溯]]></title>
        <id>https://www.cmsj.in/post/suan-fa-chang-yong-de-ji-chu-suan-fa-qiong-ju-die-dai-di-gui-he-hui-su/</id>
        <link href="https://www.cmsj.in/post/suan-fa-chang-yong-de-ji-chu-suan-fa-qiong-ju-die-dai-di-gui-he-hui-su/">
        </link>
        <updated>2020-10-19T14:14:54.000Z</updated>
        <summary type="html"><![CDATA[<p>穷举、迭代、递归和回溯这些算法属于“通用算法”，它们在解决许多问题中都有应用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>穷举、迭代、递归和回溯这些算法属于“通用算法”，它们在解决许多问题中都有应用。</p>
<!-- more -->
<h1 id="穷举">穷举</h1>
<p>在有限的范围内，可以对所有的值都进行试验和判断，从而找到满足条件的值<br>
穷举的基本模式</p>
<ul>
<li><code>for(;;){ if(); }</code><br>
时间复杂度很高。</li>
</ul>
<h1 id="迭代">迭代</h1>
<p>多次利用同一公式进行计算，每次将计算的结果再代入公式进行计算，从而逐步逼近精确解<br>
迭代的基本模式</p>
<ul>
<li><code>while() { x = f(x); }</code></li>
</ul>
<p><strong>利用迭代算法解决问题，需要做好以下三个方面的工作：</strong></p>
<h2 id="确定变量">确定变量</h2>
<p>在可以用迭代算法解决的问题中，至少存在一个直接或间接地不断由旧值递推出新值的变量，这个变量就是迭代变量。</p>
<h2 id="建立关系式">建立关系式</h2>
<p>所谓迭代关系式，指如何从变量的前一个值推出其下一个值的公式（或关系）。迭代关系式的建立是解决迭代问题的关键，通常可以使用递推或倒推的方法来完成。</p>
<h2 id="过程控制">过程控制</h2>
<p>在什么时候结束迭代过程?这是编写迭代程序必须考虑的问题。不能让迭代过程无休止地重复执行下去。迭代过程的控制通常可分为两种情况：一种是所需的迭代次数是个确定的值，可以计算出来；另一种是所需的迭代次数无法确定。对于前一种情况，可以构建一个固定次数的循环来实现对迭代过程的控制；对于后一种情况，需要进一步分析出用来结束迭代过程的条件。</p>
<h1 id="递归">递归</h1>
<p>递归(recursive)就是一个过程调用过程本身。在递归调用中，一个过程执行的某一步要用到它的上一步(或上几步)的结果<br>
递归的基本模式</p>
<ul>
<li><code>f(n){ f(n-1); }</code><br>
边界条件与递归方程是递归函数的二个要素。</li>
</ul>
<h1 id="回溯">回溯</h1>
<p>回溯法也叫试探回溯法，先选择某一可能的线索进行试探，每一步试探都有多种方式，将每一方式都一一试探，如果不符合条件就返回纠正，反复进行这种试探再返回纠正，直到得出全部符合条件的答案或是问题无解为止。<br>
回溯的基本模式</p>
<ul>
<li><code>x++; if(…) x--;</code></li>
</ul>
<p>对回溯的算法优化<br>
为了避免生成那些不可能产生最佳解的问题状态，要不断地利用限界函数(bounding function)来处死那些实际上不可能产生所需解的活结点，以减少问题的计算量。具有限界函数的深度优先生成法称为回溯法；在将来的文章中详细说明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：泛型]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-fan-xing/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-fan-xing/">
        </link>
        <updated>2020-10-04T13:57:50.000Z</updated>
        <summary type="html"><![CDATA[<p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p>
<p>泛型的定义主要有以下两种：<br>
在程序编码中一些包含类型参数的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）<br>
在程序编码中一些包含参数的类。其参数可以代表类或对象等等。（现在人们大多把这称作模板）<br>
不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。</p>
]]></summary>
        <content type="html"><![CDATA[<p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p>
<p>泛型的定义主要有以下两种：<br>
在程序编码中一些包含类型参数的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）<br>
在程序编码中一些包含参数的类。其参数可以代表类或对象等等。（现在人们大多把这称作模板）<br>
不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。</p>
<!-- more -->
<p>Java 泛型的参数只可以代表类，不能代表个别对象。由于Java泛型的类型参数之实际类型在编译时会被消除，所以无法在运行时得知其类型参数的类型，而且无法直接使用基本值类型作为泛型类型参数。Java编译程序在编译泛型时会自动加入类型转换的编码，故运行速度不会因为使用泛型而加快。<br>
由于运行时会消除泛型的对象实例类型信息等缺陷经常被人诟病，Java及JVM的开发方面也尝试解决这个问题，例如Java通过在生成字节码时添加类型推导辅助信息，从而可以通过反射接口获得部分泛型信息。通过改进泛型在JVM的实现，使其支持基本值类型泛型和直接获得泛型信息等。<br>
Java允许对个别泛型的类型参数进行约束，包括以下两种形式（假设T是泛型的类型参数，C是一般类、泛类，或是泛型的类型参数）：<br>
T实现接口I。<br>
T是C，或继承自C。</p>
<p>• 使用泛型可以针对不同的类有相同的处理办法<br>
•Vector<String> v = new Vector<String> ();<br>
v.addElement( “one” );<br>
String s = v.elementAt(0);<br>
• 使用泛型的好处<br>
类型更安全<br>
适用更广泛，针对不同的类有相同的处理办法，但这些类之间不一定有继承关系。</p>
<h1 id="泛型的使用">泛型的使用</h1>
<p>主要有泛型类、泛型接口、泛型方法以及泛型通配符。</p>
<h2 id="泛型类">泛型类</h2>
<p>①泛型使用格式</p>
<p>修饰符 class 类名&lt;代表泛型的变量&gt; { }；</p>
<p>ArrayList类中使用E来代表泛型的变量，E本身并没有含义，任意一个大写字母都可以，A、B、T、W都可以。</p>
<p>②泛型类的使用</p>
<p>在创建对象的时候确定泛型，指定好了后这个对象就只能装指定的数据类型了。</p>
<p>如果要换其他数据类型，就要重新创建该类的对象，重新指定泛型。泛型类有何好处？</p>
<p>③ArrayList的add方法</p>
<p>add方法参数就是一个泛型，也就是说创建对象时确定的是哪个类型，使用add方法就只能添加这个类型了，这就起到了一个千变万化的效果。</p>
<h2 id="泛型接口">泛型接口</h2>
<p>①泛型接口格式</p>
<p>修饰符 interface接口名&lt;代表泛型的变量&gt; { }</p>
<p>这次我们自定义一个泛型接口，泛型为A。</p>
<p>②泛型类的使用一</p>
<p>实现类实现接口、同时指定泛型类型。</p>
<p>③泛型类的使用二</p>
<p>实现类实现接口但不指定泛型，这个类也就成了泛型类。</p>
<p>ArrayList类本质上也就是这种情况，它实现了List<E>接口，但是没有指定泛型。</p>
<h2 id="泛型方法">泛型方法</h2>
<p>①泛型方法格式</p>
<p>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数){ }</p>
<p>②泛型方法使用</p>
<p>调用方法时，确定泛型的类型。</p>
<h2 id="泛型通配符">泛型通配符</h2>
<p>①两个不同类型的集合</p>
<p>一个集合泛型为String类，一个集合泛型为Integer：</p>
<p>ArrayList&lt;String&gt;list1和ArrayList&lt;Integer&gt; list2是两个不同的类型，如果用常规方法，那要两个方法（方法重载）</p>
<p>②泛型的通配符</p>
<p>不知道使用什么类型来接收的时候，此时可以使用?，?表示未知通配符。</p>
<p>其中泛型通配符还可以这样使用：</p>
<p><code>&lt;? extends Person&gt;</code>：表示可以传递Person及其子类</p>
<p><code>&lt;? super Person&gt;</code>：表示可以传递Person及其父类</p>
<p>例子</p>
<p>使用?<br>
• 如Collections的reverse方法<br>
• reverse(List&lt;?&gt; list)<br>
使用extends<br>
• 如Set的addAll方法<br>
• addAll(Collection&lt;? extends E&gt; col )<br>
使用super<br>
• 如Collections的fill方法<br>
• fill(List&lt;? super T&gt; list, T obj)</p>
<p>注意：</p>
<p>泛型不存在继承关系：ArrayList&lt;Object&gt;list并不是ArrayList&lt;String&gt;list1和ArrayList&lt;Integer&gt;list2的父类，它们三个是三个不同的类型。<br>
其中Java里的泛型是一种伪泛型。什么叫伪泛型？也就是泛型只存在于编译时期，在运行时期会被擦除。</p>
<h2 id="复杂的泛型例子">复杂的泛型例子</h2>
<p>• Arrays.sort方法<br>
<code>public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c)</code><br>
• Stream.map方法<br>
<code>public &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</code><br>
• Collections.max方法<br>
<code>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;T</code><br>
<code>max(Collection&lt;? extends T&gt; coll)</code></p>
<h2 id="协变与逆变">协变与逆变</h2>
<p>协变(Covariance) ? extends T<br>
• 原因：ListArray&lt;Apple&gt;不是ListArray&lt;Fruit&gt;的子类<br>
但又想让&lt;Apple&gt;当作&lt;Fruit&gt;<br>
就声明ListArray&lt;? extends Fruit&gt;<br>
逆变(Contravariance) ? super T<br>
• 原因：Basket&lt;Apple&gt;不是Basket&lt;Fruit&gt;的子类<br>
但又想让Comparator&lt;Fruit&gt;用于Comparator&lt;Apple&gt;<br>
就声明Comparator&lt;? super Fruit&gt;<br>
注：? 实际上是去类型化(变成Object)，只在编译时检查<br>
总之:</p>
<ul>
<li>协变 用于获取，用于out，用于Producer</li>
<li>逆变 用于加入，用于in, 用于Consumer</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：字符串类]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-zi-fu-chuan-lei/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-zi-fu-chuan-lei/">
        </link>
        <updated>2020-09-27T14:41:55.000Z</updated>
        <summary type="html"><![CDATA[<p>字符串可以分为两大类<br>
1.String类<br>
• 创建之后不会再做修改和变动，即 immutable</p>
<p>2.StringBuffer、StringBuilder类<br>
• 创建之后允许再做更改和变化<br>
• 其中 StringBuilder是JDK1.5增加的，它是非线程安全的，但是效率较高</p>
]]></summary>
        <content type="html"><![CDATA[<p>字符串可以分为两大类<br>
1.String类<br>
• 创建之后不会再做修改和变动，即 immutable</p>
<p>2.StringBuffer、StringBuilder类<br>
• 创建之后允许再做更改和变化<br>
• 其中 StringBuilder是JDK1.5增加的，它是非线程安全的，但是效率较高</p>
<!-- more -->
<p>特别注意：</p>
<blockquote>
<p>在循环中使用String的+=可能会带来效率问题</p>
</blockquote>
<h1 id="string类">String类</h1>
<p>String 类对象保存不可修改(immutable)的Unicode字符序列</p>
<ul>
<li>String类的下述方法能创建并返回一个新的String对象实例: concat, replace,<br>
replaceAll, substring, toLowerCase, toUpperCase, trim,toString.</li>
<li>查找: endsWith, startsWith, indexOf,，lastIndexOf.</li>
<li>比较: equals, equalsIgnoreCase,</li>
<li>字符及长度: charAt ，length.</li>
</ul>
<ul>
<li>
<p>format函数<br>
• %1<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo><mn>8.5</mn><mi>f</mi></mrow><annotation encoding="application/x-tex">,8.5f %序号</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 标识 宽度及精度 转换方式</p>
</li>
<li>
<p>String常量的内部化（interned）问题<br>
• 即同样的字符串常量是合并的（是指向同一个引用的）</p>
</li>
</ul>
<pre><code>“abc”==“abc”
但是 “abc” != new String(“abc”)
</code></pre>
<h1 id="stringbufferstringbuilder类">StringBuffer,StringBuilder类</h1>
<ul>
<li>StringBuffer类对象保存可修改的Unicode字符序列</li>
<li>StringBuilder类似，它效率更高，不考虑线程安全性<br>
• 构造方法<br>
StringBuffer()<br>
StringBuffer(int capacity)<br>
StringBuffer(String initialString)<br>
• 实现修改操作的方法:<br>
append, insert, reverse, setCharAt, setLength.</li>
</ul>
<h1 id="stringtokenizer类">StringTokenizer类</h1>
<p>java.util.StringTokenizer类提供了对字符串进行分割的功能。<br>
• 构造<br>
StringTokenizer(String str, String delim);<br>
• 该类的重要方法有：<br>
public int countTokens()；// 分割串的个数<br>
public boolean hasMoreTokens()；// 是否还有分割串<br>
public String nextToken()；// 得到下一分割串<br>
• 另String类的 matches, replaceAll, split可以使用正则表达式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：集合（Collection）API]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-ji-he-collectionapi/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-ji-he-collectionapi/">
        </link>
        <updated>2020-09-14T09:48:34.000Z</updated>
        <summary type="html"><![CDATA[<p>Collection API<br>
• Collection API提供“集合”“收集”的功能<br>
• Collection API包含一系列的接口和类</p>
<p>Collection接口：有两个子接口<br>
• List: (Collection的子接口)记录元素的保存顺序，且允许有重复元素<br>
• Set: (Collection的子接口)不记录元素的保存顺序，且不允许有重复元素<br>
Map接口，即映射<br>
• 键-值对（key-value pair）的集合</p>
]]></summary>
        <content type="html"><![CDATA[<p>Collection API<br>
• Collection API提供“集合”“收集”的功能<br>
• Collection API包含一系列的接口和类</p>
<p>Collection接口：有两个子接口<br>
• List: (Collection的子接口)记录元素的保存顺序，且允许有重复元素<br>
• Set: (Collection的子接口)不记录元素的保存顺序，且不允许有重复元素<br>
Map接口，即映射<br>
• 键-值对（key-value pair）的集合</p>
<!-- more -->
<h1 id="collection接口">Collection接口</h1>
<p>主要的方法：</p>
<table>
<thead>
<tr>
<th>方法  ：返回类型</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>+add(element : Object) : boolean</td>
<td>添加元素</td>
</tr>
<tr>
<td>+remove(element : Object) : boolean</td>
<td>删除元素</td>
</tr>
<tr>
<td>+size() : int</td>
<td>集合中元素的个数</td>
</tr>
<tr>
<td>+isEmpty() : boolean</td>
<td>集合是否为空</td>
</tr>
<tr>
<td>+contains(element : Object) : boolean</td>
<td>是否包含某个元素</td>
</tr>
<tr>
<td>+iterator() : Iterator</td>
<td>迭代器</td>
</tr>
</tbody>
</table>
<h2 id="迭代器iterator">迭代器（Iterator）</h2>
<p>迭代器不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList 和 HashSet 等集合。<br>
<img src="https://www.cmsj.in/post-images/1631637679066.jpg" alt="" loading="lazy"></p>
<ul>
<li>
<p>Iterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。</p>
</li>
<li>
<p>迭代器 it 的两个基本操作是 next 、hasNext 和 remove。</p>
</li>
<li>
<p>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</p>
</li>
<li>
<p>调用 it.hasNext() 用于检测集合中是否还有元素。</p>
</li>
<li>
<p>调用 it.remove() 将迭代器返回的元素删除。</p>
</li>
<li>
<p>增强的for语句<br>
在JDK1.5以后，增强的for语句(enhanced for)或叫for-each<br>
for( Element e : list ) doSomething(e);<br>
• for (Photo photo : album){<br>
• System.out.println( photo.toString() );<br>
• }<br>
编译器生成了Iterator的while(hasNext（)) {….next() }</p>
</li>
</ul>
<h2 id="collection-api-层次结构">Collection API 层次结构</h2>
<figure data-type="image" tabindex="1"><img src="https://www.cmsj.in/post-images/1631710102920.png" alt="" loading="lazy"></figure>
<h1 id="list-线性表">List 线性表</h1>
<p>线性表是最基本、最简单、也是最常用的一种数据结构。线性表（linear list）是数据结构的一种，一个线性表是n个具有相同特性的数据元素的有限序列。<br>
线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储，但是把最后一个数据元素的尾指针指向了首位结点）。</p>
<h2 id="特征">特征</h2>
<p>1．集合中必存在唯一的一个“第一元素”。<br>
2．集合中必存在唯一的一个 “最后元素” 。<br>
3．除最后一个元素之外，均有唯一的后继(后件)。<br>
4．除第一个元素之外，均有唯一的前驱(前件)。</p>
<p>线性表主要由顺序表示ArrayList或链式表示LinkedList。</p>
<p>顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，称为线性表的顺序存储结构或顺序映像（sequential mapping）。它以“物理位置相邻”来表示线性表中数据元素间的逻辑关系，可随机存取表中任一元素。</p>
<p>链式表示指的是用一组任意的存储单元存储线性表中的数据元素，称为线性表的链式存储结构。它的存储单元可以是连续的，也可以是不连续的。在表示数据元素之间的逻辑关系时，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置），这两部分信息组成数据元素的存储映像，称为结点（node）。它包括两个域；存储数据元素信息的域称为数据域；存储直接后继存储位置的域称为指针域。指针域中存储的信息称为指针或链。</p>
<h2 id="实现">实现</h2>
<p>主要的实现类是 ArrayList. LinkedList， 以及早期的Vector<br>
• E get(int index);<br>
• E set(int index, E element);<br>
• void add(int index, E element);<br>
• E remove(int index);<br>
• int indexOf(Object o);</p>
<h1 id="stack-栈">Stack 栈</h1>
<p>栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈(push)，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈(pop)，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。<br>
• 遵循“后进先出”(Last In First Out, LIFO)原则<br>
• 包含三个方法<br>
public Object push(Object item)：将指定对象压入栈中。<br>
Public Object pop()：将 栈最上面的元素从栈中取出，并返回这个对象。<br>
public boolean empty()：判断栈中没有对象元素。</p>
<h1 id="队列queue">队列Queue</h1>
<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。<br>
队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。</p>
<h2 id="顺序队列">顺序队列</h2>
<p>建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。</p>
<p>每次在队尾插入一个元素是，rear增1；每次在队头删除一个元素时，front增1。随着插入和删除操作的进行，队列元素的个数不断变化，队列所占的存储空间也在为队列结构所分配的连续空间中移动。当front=rear时，队列中没有任何元素，称为空队列。当rear增加到指向分配的连续空间之外时，队列无法再插入新元素，但这时往往还有大量可用空间未被占用，这些空间是已经出队的队列元素曾经占用过得存储单元。</p>
<p>顺序队列中的溢出现象：<br>
（1） &quot;下溢&quot;现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。<br>
（2）&quot;真上溢&quot;现象：当队列满时，做进栈运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。<br>
（3）&quot;假上溢&quot;现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为&quot;假上溢&quot;现象。</p>
<h2 id="循环队列">循环队列</h2>
<p>在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置。自己真从MaxSize-1增1变到0，可用取余运算rear%MaxSize和front%MaxSize来实现。这实际上是把队列空间想象成一个环形空间，环形空间中的存储单元循环使用，用这种方法管理的队列也就称为循环队列。除了一些简单应用之外，真正实用的队列是循环队列。<br>
在循环队列中，当队列为空时，有front=rear，而当所有队列空间全占满时，也有front=rear。为了区别这两种情况，规定循环队列最多只能有MaxSize-1个队列元素，当循环队列中只剩下一个空存储单元时，队列就已经满了。因此，队列判空的条件时front=rear，而队列判满的条件时front=（rear+1）%MaxSize。</p>
<h2 id="队列的数组实现">队列的数组实现</h2>
<p>队列可以用数组Q[1…m]来存储，数组的上界m即是队列所容许的最大容量。在队列的运算中需设两个指针：head，队头指针，指向实际队头元素；tail，队尾指针，指向实际队尾元素的下一个位置。一般情况下，两个指针的初值设为0，这时队列为空，没有元素。数组定义Q[1…10]。Q(i) i=3,4,5,6,7,8。头指针head=2，尾指针tail=8。队列中拥有的元素个数为:L=tail-head。现要让排头的元素出队，则需将头指针加1。即head=head+1这时头指针向上移动一个位置，指向Q(3)，表示Q(3)已出队。如果想让一个新元素入队，则需尾指针向上移动一个位置。即tail=tail+1这时Q(9)入队。当队尾已经处理在最上面时，即tail=10，如果还要执行入队操作，则要发生&quot;上溢&quot;，但实际上队列中还有三个空位置，所以这种溢出称为&quot;假溢出&quot;。<br>
克服假溢出的方法有两种。一种是将队列中的所有元素均向低地址区移动，显然这种方法是很浪费时间的；另一种方法是将数组存储区看成是一个首尾相接的环形区域。当存放到n地址后，下一个地址就&quot;翻转&quot;为1。在结构上采用这种技巧来存储的队列称为循环队列。<br>
队列和栈一样只允许在断点处插入和删除元素。<br>
循环队的入队算法如下：<br>
1、tail=tail+1；<br>
2、若tail=n+1，则tail=1；<br>
3、若head=tail，即尾指针与头指针重合了，表示元素已装满队列，则作上溢出错处理；<br>
4、否则，Q(tail)=X，结束（X为新入出元素）。<br>
队列和栈一样，有着非常广泛的应用。<br>
注意：（1）有时候队列中还会设置表头结点，就是在队头的前面还有一个结点，这个结点的数据域为空，但是指针域指向队头元素。<br>
（2）另外，上面的计算还可以利用下面给出的公式cq.rear=(cq.front+1)/max;<br>
当有表头结点时，公式变为cq.rear=(cq.front+1)/（max+1）。</p>
<h2 id="重要的实现是linkedlist类">重要的实现是LinkedList类</h2>
<table>
<thead>
<tr>
<th></th>
<th>可抛出异常的</th>
<th>返回元素的</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert（插入）</td>
<td>add(e)</td>
<td>offer(e)</td>
</tr>
<tr>
<td>Remove（移除）</td>
<td>remove()</td>
<td>poll()</td>
</tr>
<tr>
<td>Examine（检查）</td>
<td>element()</td>
<td>peek()</td>
</tr>
</tbody>
</table>
<h1 id="linkedlist">LinkedList</h1>
<p>LinkedList同时实现了List接口和Deque接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列（Queue），同时又可以看作一个栈（stack），这样看来，linkedList简直就是无敌的，当你需要使用栈或者队列时，可以考虑用LinkedList,一方面是因为Java官方已经声明不建议使用Stack类，更遗憾的是，Java里根本没有一个叫做Queue的类（只是一个接口的名字）。关于栈或队列，现在首选是ArrayDeque，它有着比LinkedList（当作栈或队列使用时）更好的性能。</p>
<h1 id="几个早期的类或接口">几个早期的类或接口</h1>
<p>• Vector， 现多用 ArrayList<br>
相当于动态数组(比JDK1.0中的 ArrayList好), elementAt,<br>
• Stack， 现多用 LinkedList<br>
Stack是Vector的子类, push, pop, peek<br>
• Hashtable， 现多用 HashMap<br>
Hashtable实现Map接口, 参见Properties类<br>
• Enumeration， 现多用Iterator<br>
Enumeration用另一种方式实现Iterator的功能<br>
如Vector可以得到枚举器<br>
Enumeration<E> e = v.elements();<br>
while(e.hasMoreElements()) doSomething(e.nextElement())</p>
<h1 id="set-集">Set 集</h1>
<p>两个重要的实现 HashSet及TreeSet<br>
其中TreeSet的底层是用TreeMap来实现的<br>
• <strong>Set中对象不重复</strong>，即：<br>
hashCode()不等<br>
如果hashCode()相等，再看equals或==是否为false</p>
<h1 id="map">Map</h1>
<p>• Map是键-值对的集合<br>
其中可以取到entrySet()、keySet()、values()、<br>
Map.Entry是一个嵌套接口<br>
• Map类的重要实现<br>
HashMap类<br>
TreeMap类：用红黑树的算法</p>
<h2 id="map层次结构">Map层次结构</h2>
<figure data-type="image" tabindex="2"><img src="https://www.cmsj.in/post-images/1631713185546.png" alt="" loading="lazy"></figure>
<h1 id="系统已有的排序与查找">系统已有的排序与查找</h1>
<p>Arrays类及Collections类</p>
<h2 id="arrays类">Arrays类</h2>
<p>• Arrays类是用于对<strong>数组</strong>进行排序和搜索的类。<br>
Arrays.asList( 10, 7, 6, 5, 9) 方法可以直接得到一个List对象<br>
• Arrays类提供了sort()和binarySearch()<br>
• 执行binarySearch()之前应调用sort()<br>
public static void sort(List list);<br>
public static void sort(List list, Comparator c);<br>
public static int binarySearch(List list, Object key);<br>
public static int binarySearch(List list, Object key, Comparator c);</p>
<h2 id="collections类">Collections类</h2>
<p>此类完全由在 collection 上进行操作静态方法组成.<br>
• 如sort, binarySearch, reverse等</p>
<h2 id="关于比较">关于比较</h2>
<p>1.对象是java.lang.Comparable<br>
• 实现方法<br>
• public int compareTo(Object obj){<br>
return this.price – ((Book)obj).price;}<br>
2.提供一个java.lang. Comparator<br>
• 实现方法 public int compare(T o1, T o2)<br>
• 这些方法的含义要与equals不冲突</p>
<blockquote>
<p>更多的排序与查找方法，如冒泡排序 、选择排序 、快速排序等，和二叉树、红黑树，Dijkstra算法的相关知识将来在算法和数据结构相关的文章中详细介绍。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：Lambda表达式与方法引用]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-lambda-biao-da-shi-yu-fang-fa-yin-yong/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-lambda-biao-da-shi-yu-fang-fa-yin-yong/">
        </link>
        <updated>2020-09-06T03:56:23.000Z</updated>
        <summary type="html"><![CDATA[<p>函数式编程（Functional Programming）是把函数作为基本运算单元，函数可以作为变量，可以接收函数，还可以返回函数。历史上研究函数式编程的理论是Lambda演算，所以我们经常把支持函数式编程的编码风格称为Lambda表达式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>函数式编程（Functional Programming）是把函数作为基本运算单元，函数可以作为变量，可以接收函数，还可以返回函数。历史上研究函数式编程的理论是Lambda演算，所以我们经常把支持函数式编程的编码风格称为Lambda表达式。</p>
<!-- more -->
<h1 id="lambda表达式">Lambda表达式</h1>
<p>在Java程序中，我们经常遇到一大堆单方法接口，即一个接口只定义了一个方法：</p>
<p>Comparator<br>
Runnable<br>
Callable</p>
<p>以Comparator为例，我们想要调用Arrays.sort()时，可以传入一个Comparator实例，以匿名类方式编写如下：</p>
<pre><code class="language-java">String[] array = ...
Arrays.sort(array, new Comparator&lt;String&gt;() {
    public int compare(String s1, String s2) {
        return s1.compareTo(s2);
    }
});
</code></pre>
<p>上述写法非常繁琐。从Java 8开始，我们可以用Lambda表达式替换单方法接口。改写上述代码如下：</p>
<p>// Lambda</p>
<pre><code class="language-java">import java.util.Arrays;
public class Main {
    public static void main(String[] args) {
        String[] array = new String[] { &quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;, &quot;Lemon&quot; };
        Arrays.sort(array, (s1, s2) -&gt; {
            return s1.compareTo(s2);
        });
        System.out.println(String.join(&quot;, &quot;, array));
    }
}
</code></pre>
<p>观察Lambda表达式的写法，它只需要写出方法定义：</p>
<pre><code class="language-java">(s1, s2) -&gt; {
    return s1.compareTo(s2);
}
</code></pre>
<p>其中，参数是(s1, s2)，参数类型可以省略，因为编译器可以自动推断出String类型。-&gt; { ... }表示方法体，所有代码写在内部即可。Lambda表达式没有class定义，因此写法非常简洁。</p>
<p>如果只有一行return xxx的代码，完全可以用更简单的写法：</p>
<pre><code class="language-java">Arrays.sort(array, (s1, s2) -&gt; s1.compareTo(s2));
</code></pre>
<p>返回值的类型也是由编译器自动推断的，这里推断出的返回值是int，因此，只要返回int，编译器就不会报错。</p>
<h2 id="functionalinterface">FunctionalInterface</h2>
<p>我们把只定义了单方法的接口称之为FunctionalInterface，用注解@FunctionalInterface标记。例如，Callable接口：</p>
<pre><code class="language-java">@FunctionalInterface
public interface Callable&lt;V&gt; {
    V call() throws Exception;
}
</code></pre>
<p>再来看Comparator接口：</p>
<pre><code class="language-java">@FunctionalInterface
public interface Comparator&lt;T&gt; {

    int compare(T o1, T o2);

    boolean equals(Object obj);

    default Comparator&lt;T&gt; reversed() {
        return Collections.reverseOrder(this);
    }

    default Comparator&lt;T&gt; thenComparing(Comparator&lt;? super T&gt; other) {
        ...
    }
    ...
}
</code></pre>
<p>虽然Comparator接口有很多方法，但只有一个抽象方法int compare(T o1, T o2)，其他的方法都是default方法或static方法。另外注意到boolean equals(Object obj)是Object定义的方法，不算在接口方法内。因此，Comparator也是一个FunctionalInterface。</p>
<h2 id="小结">小结</h2>
<p>单方法接口被称为FunctionalInterface。</p>
<p>接收FunctionalInterface作为参数的时候，可以把实例化的匿名类改写为Lambda表达式，能大大简化代码。</p>
<p>Lambda表达式的参数和返回值均可由编译器自动推断。</p>
<h1 id="方法引用">方法引用</h1>
<p>实际上，除了Lambda表达式，我们还可以直接传入方法引用。例如：</p>
<pre><code class="language-java">import java.util.Arrays;
public class Main {
    public static void main(String[] args) {
        String[] array = new String[] { &quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;, &quot;Lemon&quot; };
        Arrays.sort(array, Main::cmp);
        System.out.println(String.join(&quot;, &quot;, array));
    }

    static int cmp(String s1, String s2) {
        return s1.compareTo(s2);
    }
}
</code></pre>
<p>上述代码在Arrays.sort()中直接传入了静态方法cmp的引用，用Main::cmp表示。</p>
<p>因此，所谓方法引用，是指如果某个方法签名和接口恰好一致，就可以直接传入方法引用。</p>
<p>因为Comparator<String>接口定义的方法是int compare(String, String)，和静态方法int cmp(String, String)相比，除了方法名外，方法参数一致，返回类型相同，因此，我们说两者的方法签名一致，可以直接把方法名作为Lambda表达式传入：</p>
<pre><code class="language-java">Arrays.sort(array, Main::cmp);
</code></pre>
<p>注意：在这里，方法签名只看参数类型和返回类型，不看方法名称，也不看类的继承关系。</p>
<p>我们再看看如何引用实例方法。如果我们把代码改写如下：</p>
<pre><code class="language-java">import java.util.Arrays;
public class Main {
    public static void main(String[] args) {
        String[] array = new String[] { &quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;, &quot;Lemon&quot; };
        Arrays.sort(array, String::compareTo);
        System.out.println(String.join(&quot;, &quot;, array));
    }
}
</code></pre>
<p>不但可以编译通过，而且运行结果也是一样的，这说明String.compareTo()方法也符合Lambda定义。</p>
<p>观察String.compareTo()的方法定义：</p>
<pre><code class="language-java">public final class String {
    public int compareTo(String o) {
        ...
    }
}
</code></pre>
<p>这个方法的签名只有一个参数，为什么和int Comparator<String>.compare(String, String)能匹配呢？</p>
<p>因为实例方法有一个隐含的this参数，String类的compareTo()方法在实际调用的时候，第一个隐含参数总是传入this，相当于静态方法：</p>
<pre><code class="language-java">public static int compareTo(this, String o);
</code></pre>
<p>所以，String.compareTo()方法也可作为方法引用传入。</p>
<h2 id="构造方法引用">构造方法引用</h2>
<p>除了可以引用静态方法和实例方法，我们还可以引用构造方法。</p>
<p>我们来看一个例子：如果要把一个List<String>转换为List<Person>，应该怎么办？</p>
<pre><code class="language-java">class Person {
    String name;
    public Person(String name) {
        this.name = name;
    }
}

List&lt;String&gt; names = List.of(&quot;Bob&quot;, &quot;Alice&quot;, &quot;Tim&quot;);
List&lt;Person&gt; persons = ???
</code></pre>
<p>传统的做法是先定义一个ArrayList<Person>，然后用for循环填充这个List：</p>
<pre><code class="language-java">List&lt;String&gt; names = List.of(&quot;Bob&quot;, &quot;Alice&quot;, &quot;Tim&quot;);
List&lt;Person&gt; persons = new ArrayList&lt;&gt;();
for (String name : names) {
    persons.add(new Person(name));
}
</code></pre>
<p>要更简单地实现String到Person的转换，我们可以引用Person的构造方法：</p>
<pre><code class="language-java">// 引用构造方法
import java.util.*;
import java.util.stream.*;
public class Main {
    public static void main(String[] args) {
        List&lt;String&gt; names = List.of(&quot;Bob&quot;, &quot;Alice&quot;, &quot;Tim&quot;);
        List&lt;Person&gt; persons = names.stream().map(Person::new).collect(Collectors.toList());
        System.out.println(persons);
    }
}

class Person {
    String name;
    public Person(String name) {
        this.name = name;
    }
    public String toString() {
        return &quot;Person:&quot; + this.name;
    }
}
</code></pre>
<p>后面我们会讲到Stream的map()方法。现在我们看到，这里的map()需要传入的FunctionalInterface的定义是：</p>
<pre><code class="language-java">@FunctionalInterface
public interface Function&lt;T, R&gt; {
    R apply(T t);
}
</code></pre>
<p>把泛型对应上就是方法签名Person apply(String)，即传入参数String，返回类型Person。而Person类的构造方法恰好满足这个条件，因为构造方法的参数是String，而构造方法虽然没有return语句，但它会隐式地返回this实例，类型就是Person，因此，此处可以引用构造方法。构造方法的引用写法是类名::new，因此，此处传入Person::new。</p>
<h2 id="小结-2">小结</h2>
<p>FunctionalInterface允许传入：</p>
<p>接口的实现类（传统写法，代码较繁琐）；<br>
Lambda表达式（只需列出参数名，由编译器推断类型）；<br>
符合方法签名的静态方法；<br>
符合方法签名的实例方法（实例类型被看做第一个参数类型）；<br>
符合方法签名的构造方法（实例类型被看做返回类型）。<br>
FunctionalInterface不强制继承关系，不需要方法名称相同，只要求方法参数（类型和数量）与方法返回类型相同，即认为方法签名相同。</p>
<h1 id="实例">实例</h1>
<p>在下面main中新增的4个订阅者采用了不同的写法，效果是等价的。</p>
<pre><code class="language-java">public class NewsDemo {
    public static void main(String[] args) {
        //模拟有一家新闻社
        NewsAgency bbc = new NewsAgency(&quot;BBC&quot;);
        //订阅该社的新闻-普通
        bbc.addListener(new MyListener());
        //订阅该社的新闻-匿名类
        bbc.addListener(new Listener() {
            @Override
            public void newsArrived(NewsEvent e) {
                if (e.level &gt; 5) System.out.println(&quot;warning :&quot;);
                System.out.println(&quot;please note,&quot; + e.text + &quot; happened!&quot;);
            }
        });
        //订阅该社的新闻-lambda
        bbc.addListener(e -&gt; {
            if (e.level &gt; 5) System.out.println(&quot;warning :&quot;);
            System.out.println(&quot;please note,&quot; + e.text + &quot; happened!&quot;);
        });
        //订阅该社的新闻-方法引用
        bbc.addListener(new MyListener()::newsArrived);

        //新闻社启动其工作流程
        bbc.start();
    }
}


/**
 * 事件信息
 */
class NewsEvent {
    Object source;  //事件来源
    String text;    //事件内容
    int level;      //事件级别

    NewsEvent(Object source, String text, int level) {
        this.source = source;
        this.text = text;
        this.level = level;
    }
}

interface Listener {
    void newsArrived(NewsEvent e);
}

/**
 * 新闻机构
 */
class NewsAgency {
    String name; //机构名

    public NewsAgency(String name) {
        this.name = name;
    }

    Listener[] listeners = new Listener[100]; //侦听者（订阅者）
    int listenerCnt = 0; //已有的订阅者

    //加入一个订阅者
    void addListener(Listener oneListener) {
        if (listenerCnt &lt; listeners.length) {
            listeners[listenerCnt] = oneListener;
            listenerCnt++;
        }
    }

    //模拟一个事件发生，并通知所有的订阅者
    void start() {
        NewsEvent event = new NewsEvent(&quot;Mr. Joan&quot;, &quot;Bombing&quot;, 9);

        for (int i = 0; i &lt; listenerCnt; i++) {
            listeners[i].newsArrived(event);
        }

    }
}

/**
 * 实现一个订阅者
 */
class MyListener implements Listener {
    //当接收到消息后，进行一些显示
    public void newsArrived(NewsEvent e) {
        if (e.level &gt; 5) System.out.println(&quot;warning :&quot;);
        System.out.println(&quot;please note,&quot; + e.text + &quot; happened!&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java刷题：数组中重复的数字]]></title>
        <id>https://www.cmsj.in/post/java-shua-ti-shu-zu-zhong-chong-fu-de-shu-zi/</id>
        <link href="https://www.cmsj.in/post/java-shua-ti-shu-zu-zhong-chong-fu-de-shu-zi/">
        </link>
        <updated>2020-09-02T09:17:04.000Z</updated>
        <summary type="html"><![CDATA[<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任一一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1</p>
]]></summary>
        <content type="html"><![CDATA[<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任一一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1</p>
<!-- more -->
<p><strong>示例</strong></p>
<p>输入：<br>
[2,3,1,0,2,5,3]</p>
<p>返回值：<br>
2</p>
<p>说明：<br>
2或3都是对的</p>
<h2 id="思路">思路</h2>
<p>马上想到的就是暴力爆破😅两层循环，数组中每个数都与它后面的数对比，时间复杂度O(n!)太粗暴啦，那么有没有更好的办法呢？<br>
先排序，然后再遍历看看跟它相邻的数是否相等即可，时间复杂度O(nlogn+n),空间复杂度O(1);<br>
还可以另外建立一个数组，将对应的数字存放到对应下标的位置，或者用哈希表，走用空间换时间的路子；这样在存放时加个判断，时间复杂度O(n),空间复杂度O(n);<br>
这题里面允许修改原数组，这样不用新建数组，直接在原来数组中操作，遍历整个数组：<br>
1、当numbers[i]等于下标i，判断下一个下标是否对应；<br>
2、当numbers[i]不等于下标i<br>
(1)numbers[i]==numbers[numbers[i]],此时对应下标i的numbers[i]已经对应，那么出现重复数字；<br>
(2)否则交换numbers[numbers[i]],numbers[i];<br>
3、遍历结束都未发现重复数字，则返回-1；<br>
举例：<br>
numbers[i] = a, numbers[numbers[i]]=numbers[a]=b,<br>
通过交换后，numbers[i]=b,numbers[numbers[i]]=numbers[a]=a;</p>
<h2 id="代码">代码</h2>
<p>如下：</p>
<pre><code class="language-java">import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param numbers int整型一维数组 
     * @return int整型
     */
    public int duplicate (int[] numbers) {
        // write code here
        for(int i=0;i&lt;numbers.length;){              
            //注意这里，需要在判断i==numbers[i]后才能i++，否则有漏网之鱼
            if(i==numbers[i])i++;
            else{
                if(numbers[i]==numbers[numbers[i]])return numbers[i];
                else {int tmp=0;
                      tmp=numbers[numbers[i]];
                      numbers[numbers[i]]=numbers[i];
                      numbers[i]=tmp;
                    
                }
            }
            
        }
        return -1;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java&Python&C/C++程序设计：使用NotePad++编译并运行单文件]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-shi-yong-notepadbian-yi-bing-yun-xing-dan-wen-jian/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-shi-yong-notepadbian-yi-bing-yun-xing-dan-wen-jian/">
        </link>
        <updated>2020-08-25T13:50:35.000Z</updated>
        <summary type="html"><![CDATA[<p>练习时经常打开一些单个的.java，.py，.c/.cpp文件，使用IDEA、PyCharm、Clion/Visual Studio的话未免太过笨重，研究了一下，在原来就在使用的文本编辑器NotePad++中设置一番便可方便地编译运行了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>练习时经常打开一些单个的.java，.py，.c/.cpp文件，使用IDEA、PyCharm、Clion/Visual Studio的话未免太过笨重，研究了一下，在原来就在使用的文本编辑器NotePad++中设置一番便可方便地编译运行了。</p>
<!-- more -->
<h1 id="创建命令">创建命令</h1>
<p>点击菜单栏-运行-运行按钮，如图所示：<img src="https://www.cmsj.in/post-images/1631282232824.png" alt="" loading="lazy"></p>
<p>在运行框中分别输入如下的指令，点击保存，输入对应的名称，就可以在运行菜单看到它们了。</p>
<p>Java编译运行-UTF-8<br>
<code>cmd /c javac -encoding UTF-8 -d &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; &quot;$(FULL_CURRENT_PATH)&quot; &amp;&amp; echo 编译成功！ &amp;&amp; java -cp &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; -Dfile.encoding=UTF-8 &quot;$(NAME_PART)&quot; &amp; PAUSE</code></p>
<p>Java编译运行-GBK<br>
<code>cmd /c javac -d &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; &quot;$(FULL_CURRENT_PATH)&quot; &amp;&amp; echo 编译成功！ &amp;&amp; java -cp &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; &quot;$(NAME_PART)&quot; &amp; PAUSE</code></p>
<p>Java反编译-当前选中类<br>
<code>cmd /c cd /d &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; &amp;&amp; javap -c -v -p &quot;$(CURRENT_WORD)&quot;&gt;&quot;$(CURRENT_WORD)&quot;.txt &amp;&amp; type &quot;$(CURRENT_WORD)&quot;.txt &amp;&amp; &quot;$(CURRENT_WORD)&quot;.txt &amp; pause</code></p>
<p>Java反编译-当前文件所有类<br>
<code>cmd /c cd /d &quot;$(CURRENT_DIRECTORY)\Java\$(NAME_PART)&quot; &amp;&amp; javap -c -v -p *.class&gt;class.txt &amp;&amp; type class.txt &amp;&amp; class.txt &amp; pause</code></p>
<p>Python运行<br>
<code>cmd /c cd /d &quot;$(CURRENT_DIRECTORY)&quot; &amp; python &quot;$(FILE_NAME)&quot; &amp; ECHO. &amp; PAUSE</code></p>
<p>C编译运行-UTF-8<br>
<code>cmd /c mkdir &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; cls &amp; cd /d &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; gcc -fexec-charset=GBK &quot;$(FULL_CURRENT_PATH)&quot; -o &quot;$(NAME_PART).exe&quot; &amp;&amp; &quot;$(NAME_PART)&quot;.exe &amp; ECHO. &amp; PAUSE</code></p>
<p>C编译运行-GBK<br>
<code>cmd /c mkdir &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; cls &amp; cd /d &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; gcc &quot;$(FULL_CURRENT_PATH)&quot; -o &quot;$(NAME_PART).exe&quot; &amp;&amp; &quot;$(NAME_PART)&quot;.exe &amp; ECHO. &amp; PAUSE</code></p>
<p>C++编译运行-UTF-8<br>
<code>cmd /c mkdir &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; cls &amp; cd /d &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; g++ -fexec-charset=GBK &quot;$(FULL_CURRENT_PATH)&quot; -o &quot;$(NAME_PART).exe&quot; &amp;&amp; &quot;$(NAME_PART)&quot;.exe &amp; ECHO. &amp; PAUSE</code></p>
<p>C++编译运行-GBK<br>
<code>cmd /c mkdir &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; cls &amp; cd /d &quot;$(CURRENT_DIRECTORY)\C_Cpp\$(NAME_PART)&quot; &amp; g++ &quot;$(FULL_CURRENT_PATH)&quot; -o &quot;$(NAME_PART).exe&quot; &amp;&amp; &quot;$(NAME_PART)&quot;.exe &amp; ECHO. &amp; PAUSE</code></p>
<h1 id="修改命令">修改命令</h1>
<p>想要将原来的命令行修改为改进后的命令行，发现Notepad++并没有提供修改的功能</p>
<p>想要修改，有2种办法</p>
<p>（1）点击&quot;运行&quot;菜单-&gt;&quot;管理快捷键&quot;按钮后，删除原来的快捷键，然后重新建一遍。</p>
<p>（2）修改shortcuts.xml。注意shortcuts.xml的路径有可能为“C:\Users\XXX\AppData\Roaming\Notepad++”下的shortcuts.xml，而并不是“C:\Program Files (x86)\Notepad++”下的shortcuts.xml</p>
<p>当然系统中需要安装JDK、Python、MinGW-w64并配置好环境变量哦:)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：统计代码的执行时间的3种方法]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-tong-ji-dai-ma-de-zhi-xing-shi-jian-de-3-chong-fang-fa/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-tong-ji-dai-ma-de-zhi-xing-shi-jian-de-3-chong-fang-fa/">
        </link>
        <updated>2020-08-20T04:44:24.000Z</updated>
        <summary type="html"><![CDATA[<p>在日常开发中经常需要测试一些代码的执行时间，所以本文就汇总了一些 Java 中比较常用的执行时间统计方法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在日常开发中经常需要测试一些代码的执行时间，所以本文就汇总了一些 Java 中比较常用的执行时间统计方法。</p>
<!-- more -->
<h1 id="方法一systemcurrenttimemillis">方法一：System.currentTimeMillis</h1>
<p>此方法为 Java 内置的方法，使用 System#currentTimeMillis 来统计执行的时间（统计单位：毫秒），示例代码如下：</p>
<pre><code class="language-java">public class TimeIntervalTest {
    public static void main(String[] args) throws InterruptedException {
        // 开始时间
        long stime = System.currentTimeMillis();
        // 执行时间（1s）
        Thread.sleep(1000);
        // 结束时间
        long etime = System.currentTimeMillis();
        // 计算执行时间
        System.out.printf(&quot;执行时长：%d 毫秒.&quot;, (etime - stime));
    }
}
</code></pre>
<p>以上程序的执行结果为：</p>
<p><code>执行时长：1000 毫秒.</code></p>
<h1 id="方法二systemnanotime">方法二：System.nanoTime</h1>
<p>此方法为 Java 内置的方法，使用 System#nanoTime 来统计执行时间（统计单位：纳秒），它的执行方法和 System#currentTimeMillis 类似，示例代码如下：</p>
<pre><code class="language-java">public class TimeIntervalTest {
    public static void main(String[] args) throws InterruptedException {
        // 开始时间
        long stime = System.nanoTime();
        // 执行时间（1s）
        Thread.sleep(1000);
        // 结束时间
        long etime = System.nanoTime();
        // 计算执行时间
        System.out.printf(&quot;执行时长：%d 纳秒.&quot;, (etime - stime));
    }
}
</code></pre>
<p>以上程序的执行结果为：</p>
<p><code>执行时长：1000769200 纳秒.</code></p>
<p><code>小贴士：1 毫秒 = 100 万纳秒。</code></p>
<h1 id="方法三new-date">方法三：new Date</h1>
<p>此方法也是 Java 的内置方法，在开始执行前 new Date() 创建一个当前时间对象，在执行结束之后 new Date() 一个当前执行时间，然后再统计两个 Date 的时间间隔，示例代码如下：</p>
<pre><code class="language-java">import java.util.Date;
 
public class TimeIntervalTest {
    public static void main(String[] args) throws InterruptedException {
        // 开始时间
        Date sdate = new Date();
        // 执行时间（1s）
        Thread.sleep(1000);
        // 结束时间
        Date edate = new Date();
        //  统计执行时间（毫秒）
        System.out.printf(&quot;执行时长：%d 毫秒.&quot; , (edate.getTime() - sdate.getTime())); 
    }
}
</code></pre>
<p>以上程序的执行结果为：</p>
<p><code>执行时长：1000 毫秒.</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：更改Swing的Look and Feel UI皮肤]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-geng-gai-swing-de-look-and-feel-ui-pi-fu/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-geng-gai-swing-de-look-and-feel-ui-pi-fu/">
        </link>
        <updated>2020-08-17T02:20:06.000Z</updated>
        <summary type="html"><![CDATA[<p>Java自身UI界面太丑怎么办？通过在加载窗口时加入以下代码就可以将Java应用程序GUI设置成当前系统风格：</p>
<pre><code class="language-java">try {
    // 设置本机系统外观
	UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (Exception e) {
	e.printStackTrace();
}
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>Java自身UI界面太丑怎么办？通过在加载窗口时加入以下代码就可以将Java应用程序GUI设置成当前系统风格：</p>
<pre><code class="language-java">try {
    // 设置本机系统外观
	UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (Exception e) {
	e.printStackTrace();
}
</code></pre>
<!-- more -->
<p>根据UIManager源程序，</p>
<pre><code class="language-java">private static LookAndFeelInfo[] installedLAFs;

    static {
        ArrayList&lt;LookAndFeelInfo&gt; iLAFs = new ArrayList&lt;LookAndFeelInfo&gt;(4);
        iLAFs.add(new LookAndFeelInfo(
                      &quot;Metal&quot;, &quot;javax.swing.plaf.metal.MetalLookAndFeel&quot;));
        iLAFs.add(new LookAndFeelInfo(
                      &quot;Nimbus&quot;, &quot;javax.swing.plaf.nimbus.NimbusLookAndFeel&quot;));
        iLAFs.add(new LookAndFeelInfo(&quot;CDE/Motif&quot;,
                  &quot;com.sun.java.swing.plaf.motif.MotifLookAndFeel&quot;));

        // Only include windows on Windows boxs.
        OSInfo.OSType osType = AccessController.doPrivileged(OSInfo.getOSTypeAction());
        if (osType == OSInfo.OSType.WINDOWS) {
            iLAFs.add(new LookAndFeelInfo(&quot;Windows&quot;,
                        &quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;));
            if (Toolkit.getDefaultToolkit().getDesktopProperty(
                    &quot;win.xpstyle.themeActive&quot;) != null) {
                iLAFs.add(new LookAndFeelInfo(&quot;Windows Classic&quot;,
                 &quot;com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel&quot;));
            }
        }
        else if (osType == OSInfo.OSType.MACOSX) {
            iLAFs.add(new LookAndFeelInfo(&quot;Mac OS X&quot;, &quot;com.apple.laf.AquaLookAndFeel&quot;));
        }
        else {
            // GTK is not shipped on Windows.
            iLAFs.add(new LookAndFeelInfo(&quot;GTK+&quot;,
                  &quot;com.sun.java.swing.plaf.gtk.GTKLookAndFeel&quot;));
        }
        installedLAFs = iLAFs.toArray(new LookAndFeelInfo[iLAFs.size()]);
    }
</code></pre>
<p>想要更改为windows样式只需要<br>
<code>UIManager.setLookAndFeel(&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;);</code><br>
就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java程序设计：用“埃氏筛法”求2～n以内的素数]]></title>
        <id>https://www.cmsj.in/post/java-cheng-xu-she-ji-yong-ai-shi-shai-fa-qiu-2~n-yi-nei-de-su-shu/</id>
        <link href="https://www.cmsj.in/post/java-cheng-xu-she-ji-yong-ai-shi-shai-fa-qiu-2~n-yi-nei-de-su-shu/">
        </link>
        <updated>2020-08-15T15:18:23.000Z</updated>
        <summary type="html"><![CDATA[<p>用“埃氏筛法”求2～100以内的素数。2～100以内的数，先去掉2的倍数，再去掉3的倍数，再去掉5的倍数，……依此类推，最后剩下的就是素数。</p>
<p>‏</p>
]]></summary>
        <content type="html"><![CDATA[<p>用“埃氏筛法”求2～100以内的素数。2～100以内的数，先去掉2的倍数，再去掉3的倍数，再去掉5的倍数，……依此类推，最后剩下的就是素数。</p>
<p>‏</p>
<!-- more -->
<p>‏要求使用数组及增强的for语句。</p>
<p>写了个带图形界面的，源代码如下：</p>
<h3 id="mainjava">Main.java</h3>
<pre><code class="language-java">package leet;


import java.util.Arrays;

public class Main {

    public static void main(String[] args) {
        Gui.init();
    }

    public static String calc(int num) {
        boolean[] isPrime = new boolean[num];
        Arrays.fill(isPrime, true);
        //1不考虑，设为false
        isPrime[0] = false;
        //2是质数，从3开始。
        int count = 1;
        for (int i = 2; i &lt; num; i++) {
            for (int j = 1; j &lt; i; j++) {
                if (isPrime[j]) {
                    if ((i + 1) % (j + 1) == 0) {
                        isPrime[i] = false;
                        break;
                    }
                }
            }
            if (isPrime[i]) {
                count++;
            }
        }
        int[] res = new int[count];

        for (int i = 0, j = 0; j &lt; count; i++) {
            if (isPrime[i]) {
                res[j] = i + 1;
                j++;
            }
        }
        String result = &quot;素数共有&quot; + count + &quot;个，分别为：\n&quot;;
        for (int i : res) {
            result = result + i + &quot;， &quot;;
        }
        return result;
    }
}

</code></pre>
<h3 id="guijava">Gui.java</h3>
<pre><code class="language-java">package leet;

import javax.swing.*;

public class Gui {
    private JPanel panel1;
    private JButton button1;
    private JTextArea textArea1;
    private JTextField textField1;
    private JLabel label1;
    private JScrollPane jscroll;

    public Gui() {
        button1.addActionListener(e -&gt; textArea1.setText(Main.calc(getIntTextField1())));
    }

    public static void init() {
        try {
            // 设置本机系统外观
            UIManager.setLookAndFeel(&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }
        JFrame frame = new JFrame(&quot;Gui&quot;);
        frame.setContentPane(new Gui().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    public int getIntTextField1() {
        int ret = 0;
        try {
            ret = Integer.parseInt(textField1.getText());
            if (ret &lt; 3) {
                ret = 0;
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            textArea1.setText(&quot;请输入不小于2的整数！&quot;);
        }
        return ret;
    }
}

</code></pre>
<h3 id="运行效果如图">运行效果如图：</h3>
<figure data-type="image" tabindex="1"><img src="https://www.cmsj.in/post-images/1631116714046.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>